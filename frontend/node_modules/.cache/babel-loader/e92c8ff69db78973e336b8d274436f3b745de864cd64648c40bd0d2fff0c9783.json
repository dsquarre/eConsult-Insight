{"ast":null,"code":"import{useRef,useState}from\"react\";import'./App.css';import Result from\"./result\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const DragDropFiles=()=>{const[files,setFiles]=useState(null);const[upload,setupload]=useState(null);const[result,setresult]=useState(null);const[text,setText]=useState(\"\");const inputRef=useRef();const handleDragOver=event=>{event.preventDefault();};const handleDrop=event=>{event.preventDefault();setFiles(event.dataTransfer.files[0]);};const handleClick=async event=>{event.preventDefault();setupload(files);console.log(\"please wait while we summarize your file\");const formData=new FormData();formData.append(\"file\",files);try{const endpoint=\"/upload/\";const response=await fetch(endpoint,{method:\"POST\",body:formData});if(response.ok){setresult(files);console.log(\"file processed\");}else{console.log(\"file not processed\");}}catch(error){console.log(error);}};const gettext=async()=>{try{const response=await fetch('/result/highlights/');const data=await response.text();// use .text() because it's plain text\nsetText(data);}catch(error){console.error('Error fetching text:',error);}};if(files&&!upload&&!result)return/*#__PURE__*/_jsxs(\"div\",{className:\"uploads\",children:[/*#__PURE__*/_jsx(\"p\",{children:files.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setFiles(null),children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleClick,children:\"Upload\"})]})]});else if(files&&upload&&!result)return/*#__PURE__*/_jsxs(\"div\",{className:\"processing\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Please wait while we process your files...\"}),/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"})]});else if(files&&result)return/*#__PURE__*/_jsx(\"div\",{children:gettext()&&Result(text)});return/*#__PURE__*/_jsx(_Fragment,{children:!files&&/*#__PURE__*/_jsxs(\"div\",{className:\"dropzone\",onDragOver:handleDragOver,onDrop:handleDrop,children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Drag and Drop Files to Upload\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"OR\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:event=>setFiles(event.target.files[0]),hidden:true,ref:inputRef}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>inputRef.current.click(),children:\"Select Files\"})]})});};export default DragDropFiles;","map":{"version":3,"names":["useRef","useState","Result","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DragDropFiles","files","setFiles","upload","setupload","result","setresult","text","setText","inputRef","handleDragOver","event","preventDefault","handleDrop","dataTransfer","handleClick","console","log","formData","FormData","append","endpoint","response","fetch","method","body","ok","error","gettext","data","className","children","name","onClick","onDragOver","onDrop","type","onChange","target","hidden","ref","current","click"],"sources":["/home/robo/meeting/frontend/src/DragDropFiles.js"],"sourcesContent":["import { useRef, useState} from \"react\";\r\nimport './App.css'\r\nimport Result from \"./result\";\r\n\r\n\r\n    \r\n \r\nconst DragDropFiles = () => {\r\n    const [files, setFiles] = useState(null);\r\n    const [upload, setupload] = useState(null);\r\n    const [result, setresult] = useState(null);\r\n    const[text, setText] = useState(\"\");\r\n    const inputRef = useRef();\r\n    const handleDragOver = (event) =>{\r\n        event.preventDefault();\r\n    };\r\n    const handleDrop = (event) => {\r\n        event.preventDefault();\r\n        setFiles(event.dataTransfer.files[0])\r\n    };\r\n    const handleClick = async(event) =>{\r\n        event.preventDefault();\r\n        setupload(files);\r\n        console.log(\"please wait while we summarize your file\");\r\n        const formData = new FormData();\r\n        formData.append(\"file\",files);\r\n        try {\r\n        const endpoint = \"/upload/\"\r\n        const response = await fetch(endpoint,{\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n        if (response.ok){setresult(files); console.log(\"file processed\");}\r\n        else {console.log(\"file not processed\");}\r\n        }\r\n        catch(error){\r\n        console.log(error);\r\n        }\r\n        };\r\n        const gettext = async () => {\r\n                try {\r\n                  const response = await fetch('/result/highlights/');\r\n                  const data = await response.text(); // use .text() because it's plain text\r\n                  setText(data);\r\n                } catch (error) {\r\n                  console.error('Error fetching text:', error);\r\n                }\r\n              };\r\n    \r\n\r\n    if (files && !upload && !result) return (\r\n        <div className=\"uploads\">\r\n            <p>\r\n                {files.name}\r\n            </p>\r\n            <div className=\"actions\">\r\n                <button onClick={() => setFiles(null)}>Cancel</button>\r\n                <button onClick={handleClick }>Upload</button>\r\n            </div>\r\n        </div>\r\n    )\r\n    else if(files && upload && !result) return (\r\n        <div className=\"processing\">\r\n            <h1>Please wait while we process your files...</h1>\r\n            <div className=\"spinner\" />\r\n        </div>\r\n    )\r\n    else if (files && result) return (\r\n        <div>{\r\n            gettext() &&\r\n            Result(text)\r\n               }</div>\r\n        \r\n        )\r\n\r\n    return (\r\n        <>\r\n        {!files &&(\r\n            \r\n\r\n\r\n            <div \r\n                className=\"dropzone\"\r\n                onDragOver={handleDragOver}\r\n                onDrop={handleDrop}\r\n            >\r\n                <h1> Drag and Drop Files to Upload</h1>\r\n                <h1>OR</h1>\r\n                <input \r\n                    type=\"file\"\r\n                    onChange = {(event) => setFiles(event.target.files[0])}\r\n                    hidden\r\n                    ref={inputRef}\r\n                />\r\n            \r\n                <button onClick={() => inputRef.current.click()}>Select Files</button>\r\n            </div>\r\n          )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DragDropFiles;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}