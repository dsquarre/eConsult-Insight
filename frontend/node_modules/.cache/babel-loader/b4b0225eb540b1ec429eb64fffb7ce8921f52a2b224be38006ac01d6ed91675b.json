{"ast":null,"code":"var _jsxFileName = \"/home/robo/meeting/frontend/src/processing.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pdf = \"http://localhost:3000/summary.pdf\";\nconst Download = url => {\n  const filename = url.split(\"/\").pop();\n  const aTag = document.createElement(\"a\");\n  aTag.href = url;\n  aTag.setAttribute(\"download\", filename);\n  document.body.appendChild(aTag);\n  aTag.click();\n  aTag.remove();\n};\n_c = Download;\nconst download = () => {\n  fetch('http://localhost:8000/result/').then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement('a');\n      a.href = url;\n      a.download = \"transcribe.txt\";\n      a.click();\n      a.remove();\n    });\n    //window.location.href = response.url;\n  });\n};\nconst Processing = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"process\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please waitt while we summarize your text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Processing;\nconst Result = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Here is your consise summary of the meeting in pdf format.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          download();\n        },\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Result;\nexport default Result;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Download\");\n$RefreshReg$(_c2, \"Processing\");\n$RefreshReg$(_c3, \"Result\");","map":{"version":3,"names":["pdf","Download","url","filename","split","pop","aTag","document","createElement","href","setAttribute","body","appendChild","click","remove","_c","download","fetch","then","response","blob","window","URL","createObjectURL","a","Processing","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Result","onClick","_c3","$RefreshReg$"],"sources":["/home/robo/meeting/frontend/src/processing.js"],"sourcesContent":["const pdf = \"http://localhost:3000/summary.pdf\";\nconst Download = (url)=>\n    {\n      const filename = url.split(\"/\").pop();\n      const aTag = document.createElement(\"a\");\n      aTag.href = url;\n      aTag.setAttribute(\"download\",filename);\n      document.body.appendChild(aTag);\n      aTag.click();\n      aTag.remove();\n  };\nconst download = () => {\n    fetch('http://localhost:8000/result/')\n        .then(response => {\n            response.blob().then(blob => {\n                let url = window.URL.createObjectURL(blob);\n                let a = document.createElement('a');\n                a.href = url;\n                a.download = \"transcribe.txt\";\n                a.click();\n                a.remove();\n            });\n            //window.location.href = response.url;\n    });\n}\n\nconst Processing = () => {\n  return (\n    <div className=\"process\">\n      <h1>Please waitt while we summarize your text</h1>\n    </div>\n\n  )\n}\n\nconst Result = ()=>{  \nreturn (\n    <div className = \"text\">\n    <h1>Here is your consise summary of the meeting in pdf format.</h1>\n    <div className='buttons'>\n    <button onClick={()=>{download();}}>Download</button>\n    </div>\n    </div>\n    )};\nexport default Result;"],"mappings":";;AAAA,MAAMA,GAAG,GAAG,mCAAmC;AAC/C,MAAMC,QAAQ,GAAIC,GAAG,IACjB;EACE,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EACrC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;EACfI,IAAI,CAACI,YAAY,CAAC,UAAU,EAACP,QAAQ,CAAC;EACtCI,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EACZP,IAAI,CAACQ,MAAM,CAAC,CAAC;AACjB,CAAC;AAACC,EAAA,GATEd,QAAQ;AAUd,MAAMe,QAAQ,GAAGA,CAAA,KAAM;EACnBC,KAAK,CAAC,+BAA+B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAI;IACdA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAACE,IAAI,IAAI;MACzB,IAAIlB,GAAG,GAAGmB,MAAM,CAACC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;MAC1C,IAAII,CAAC,GAAGjB,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACnCgB,CAAC,CAACf,IAAI,GAAGP,GAAG;MACZsB,CAAC,CAACR,QAAQ,GAAG,gBAAgB;MAC7BQ,CAAC,CAACX,KAAK,CAAC,CAAC;MACTW,CAAC,CAACV,MAAM,CAAC,CAAC;IACd,CAAC,CAAC;IACF;EACR,CAAC,CAAC;AACN,CAAC;AAED,MAAMW,UAAU,GAAGA,CAAA,KAAM;EACvB,oBACEC,OAAA;IAAKC,SAAS,EAAC,SAAS;IAAAC,QAAA,eACtBF,OAAA;MAAAE,QAAA,EAAI;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAGV,CAAC;AAAAC,GAAA,GAPKR,UAAU;AAShB,MAAMS,MAAM,GAAGA,CAAA,KAAI;EACnB,oBACIR,OAAA;IAAKC,SAAS,EAAG,MAAM;IAAAC,QAAA,gBACvBF,OAAA;MAAAE,QAAA,EAAI;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnEN,OAAA;MAAKC,SAAS,EAAC,SAAS;MAAAC,QAAA,eACxBF,OAAA;QAAQS,OAAO,EAAEA,CAAA,KAAI;UAACnB,QAAQ,CAAC,CAAC;QAAC,CAAE;QAAAY,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AACL,CAAC;AAACI,GAAA,GARDF,MAAM;AASZ,eAAeA,MAAM;AAAC,IAAAnB,EAAA,EAAAkB,GAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}